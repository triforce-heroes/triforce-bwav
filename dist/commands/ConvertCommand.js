import{cpSync as o,createReadStream as t,createWriteStream as e,existsSync as s,mkdirSync as r,readFileSync as i,rmSync as p}from"node:fs";import{basename as m,dirname as c}from"node:path";import{fatal as n}from"@triforce-heroes/triforce-core/Console";import f from"archiver";import{globSync as l}from"glob";import{Extract as u}from"unzipper";import{BRSTMConvert as a}from"../tools/BRSTM.js";import{BYMLConvert as d}from"../tools/BYML.js";import{VGAConvert as w}from"../tools/VGA.js";import{ZSTDCompress as h}from"../tools/ZSTD.js";import{wavesHashes as g}from"../utils/hash.js";import{isModified as v}from"../utils/time.js";import{resourceADPCMSet as y,resourceLopusSet as $,resourcesHashes as S,resourcesWrite as j}from"../utils/yaml.js";export async function ConvertCommand(z){void 0!==z.copy&&(s(z.copy)?(p(z.copy,{recursive:!0,force:!0}),r(z.copy,{recursive:!0})):n(`The path "${z.copy}" does not exist.`)),process.stdout.write("Searching by WAV files...\n");let C=l("**/*.wav",{cwd:process.cwd(),posix:!0});if(0===C.length){process.stdout.write("- None files found.");return}process.stdout.write(`- Found ${String(C.length)} files.

`),process.stdout.write("Converting...\n");let b=e("romfs.zip"),L=f("zip");for(let o of(L.pipe(b),C)){let t=m(o,".wav"),e=`${c(o)}/${t}.c.bwav`;if(!g.has(t)){process.stdout.write(`- ${o}... INVALID
`);continue}let r=S[g.get(t)],p=t.split("_Text_")[0],n=`romfs/Voice/Resource/USen/EventFlowMsg/${p}_Stream`,f=r.items[0].value,l=f.items.length,u=4===f.items[0].items.length,d=!0===z.force||!s(e)||v(o,e);if(d&&process.stdout.write(`- [${u?"D":"L"}${String(l)}] ${o}... `),u)d&&a(o,e,l),y(r,i(e));else{d&&w(o,e,l);let t=i(e);$(r,t,t.readUInt32LE(24),l)}L.file(e,{name:`${n}/${t}.bwav`}),d&&process.stdout.write("OK\n")}process.stdout.write(`
`),process.stdout.write("Patching YAML... ");let O=j(),T=d(O),V=h(T);L.file(V,{name:"romfs/Voice/BwavInfo/USen.byml.zs"}),!0===z.keepTemps&&o(O,"USen.yaml",{force:!0}),p(O),p(T),process.stdout.write(`OK
`),process.stdout.write("Compressing... "),await L.finalize(),p(V),process.stdout.write(`OK
`),void 0!==z.copy&&(process.stdout.write("Copying... "),await t("romfs.zip").pipe(u({path:z.copy})).promise(),process.stdout.write(`OK
`)),process.stdout.write(`
DONE!`)}